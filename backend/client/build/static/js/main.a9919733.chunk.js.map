{"version":3,"sources":["components/Message.js","components/MessagesList.js","components/Chat.js","App.js","serviceWorker.js","index.js"],"names":["Message","message","owner","description","type","timestamp","className","MessagesList","messages","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","block","inline","map","index","key","ref","socket","io","connect","Chat","timeout","useState","input","setInput","setMessages","typing","setTyping","on","Object","assign","id","oldMessages","data","timeoutFunction","emit","showAlert","value","onSubmit","event","preventDefault","onKeyUp","clearTimeout","setTimeout","onChange","persist","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+VAiBeA,MAdf,YAAgC,IAAZC,EAAW,EAAXA,QAEVC,EAAwCD,EAAxCC,MAAOC,EAAiCF,EAAjCE,YAAaC,EAAoBH,EAApBG,KAAMC,EAAcJ,EAAdI,UAElC,OAAO,yBAAKC,UAAS,UAAc,UAATF,EAAmBA,EAAOF,EAA/B,eACnB,wBAAII,UAAoB,UAATF,EAAmBA,EAAOF,GACvC,6BACGC,EACAE,GAAa,yBAAKC,UAAW,gBAAiBD,OCWxCE,G,MAlBM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEhBC,EAAiBC,iBAAO,MAQ9B,OAFAC,qBAJuB,WACrBF,EAAeG,QAAQC,eAAe,CAAEC,SAAU,SAAUC,MAAO,UAAWC,OAAQ,YAG9D,CAACR,IAEpB,yBAAKF,UAAW,0BACrB,wBAAIA,UAAW,gBACZE,EAASS,KAAI,SAAChB,EAASiB,GAAV,OAAoB,kBAAC,EAAD,CAASC,IAAKD,EAAOjB,QAASA,OAChE,yBAAKmB,IAAKX,QCZVY,G,MAASC,IAAGC,QAAQ,8CAwEXC,MAtEf,WAAkB,IAIZC,EAJW,EACWC,mBAAS,IADpB,mBACRC,EADQ,KACDC,EADC,OAEiBF,mBAAS,IAF1B,mBAERlB,EAFQ,KAEEqB,EAFF,OAGaH,oBAAS,GAHtB,mBAGRI,EAHQ,KAGAC,EAHA,KAmBfpB,qBAAU,WAERU,EAAOW,GAAG,WAAW,SAAC/B,GACpBgC,OAAOC,OAAOjC,EAAS,CACrBC,MAAOD,EAAQkC,KAAOd,EAAOc,GACzB,cACA,kBAENN,GAAY,SAACO,GAAD,4BAAqBA,GAArB,CAAkCnC,UAGhDoB,EAAOW,GAAG,UAAU,SAACK,GACnBN,EAAUM,QAGX,IAEH,IAMMC,EAAkB,WACtBjB,EAAOkB,KAAK,UAAU,IAGlBC,EAAYV,EAAOW,OAASpB,EAAOc,KAAOL,EAAOK,GAEvD,OAAO,yBAAK7B,UAAU,OACpB,yBAAKA,UAAW,kBACd,yBAAKA,UAAW,QACd,kBAAC,EAAD,CAAcE,SAAUA,IACxB,yBAAKF,UAAW,gBACd,yBAAKA,UAAW,UACbkC,GAAa,mDAEhB,0BAAME,SAjDO,SAACC,GACpBA,EAAMC,iBACNhB,EAAS,IACTP,EAAOkB,KAAK,UAAWZ,KA+Cf,2BACEkB,QAtBQ,SAACF,GACnBtB,EAAOkB,KAAK,UAAU,GACtBO,aAAarB,GACbA,EAAUsB,WAAWT,EAAiB,MAoB5BU,SA9Cc,SAACL,GACzBA,EAAMM,UACN,IAAMR,EAAQE,EAAMO,OAAOT,MAC3Bb,EAASa,IA4CCA,MAAOd,IACT,8C,MC5DGwB,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a9919733.chunk.js","sourcesContent":["import React from 'react'\nimport '../styles/Message.css'\n\nfunction Message ({ message }) {\n\n  const { owner, description, type, timestamp } = message\n\n  return <div className={`${type === 'event' ? type : owner}-container`}>\n    <li className={type === 'event' ? type : owner}>\n      <div>\n        {description}\n        {timestamp && <div className={'message-hour'}>{timestamp}</div>}\n      </div>\n    </li>\n  </div>\n}\n\nexport default Message\n","import React, { useEffect, useRef } from 'react'\nimport Message from './Message'\nimport '../styles/MessagesList.css'\n\nconst MessagesList = ({ messages }) => {\n\n  const messagesEndRef = useRef(null)\n\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' })\n  }\n\n  useEffect(scrollToBottom, [messages])\n\n  return <div className={'messagesList-container'}>\n    <ul className={'messagesList'}>\n      {messages.map((message, index) => <Message key={index} message={message}/>)}\n      <div ref={messagesEndRef}/>\n    </ul>\n  </div>\n}\n\nexport default MessagesList\n","import React, { useEffect, useState } from 'react'\nimport io from 'socket.io-client'\nimport MessagesList from './MessagesList'\nimport '../styles/Chat.css'\n\nconst socket = io.connect('https://glacial-crag-75504.herokuapp.com/')\n\nfunction Chat () {\n  const [input, setInput] = useState('')\n  const [messages, setMessages] = useState([])\n  const [typing, setTyping] = useState(false)\n  let timeout;\n\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    setInput('')\n    socket.emit('message', input)\n  }\n\n  const handleInputChange = (event) => {\n    event.persist()\n    const value = event.target.value\n    setInput(value)\n  }\n\n  useEffect(() => {\n\n    socket.on('message', (message) => {\n      Object.assign(message, {\n        owner: message.id === socket.id\n          ? 'own-message'\n          : 'other-message'\n      })\n      setMessages((oldMessages) => [...oldMessages, message])\n    })\n\n    socket.on('typing', (data) => {\n      setTyping(data)\n    })\n\n  }, [])\n\n  const handleKeyUp = (event) => {\n    socket.emit('typing', true)\n    clearTimeout(timeout)\n    timeout = setTimeout(timeoutFunction, 2000)\n  }\n\n  const timeoutFunction = () => {\n    socket.emit('typing', false)\n  }\n\n  const showAlert = typing.value && socket.id !== typing.id\n\n  return <div className=\"App\">\n    <div className={'chat-container'}>\n      <div className={'chat'}>\n        <MessagesList messages={messages}/>\n        <div className={'chat-actions'}>\n          <div className={'alerts'}>\n            {showAlert && <p>Somone is typing...</p>}\n          </div>\n          <form onSubmit={handleSubmit}>\n            <input\n              onKeyUp={handleKeyUp}\n              onChange={handleInputChange}\n              value={input}/>\n            <button>Send</button>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n\n}\n\nexport default Chat\n","import React from 'react';\nimport Chat from './components/Chat'\nimport './App.css';\n\nfunction App() {\n  return <Chat/>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}